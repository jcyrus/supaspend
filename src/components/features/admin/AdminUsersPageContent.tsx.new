"use client";

import { useState } from "react";
import { CreateUserForm } from "./CreateUserForm";
import { UsersTable } from "./UsersTable";
import { FundUserModal } from "./FundUserModal";
import { AdminBalanceCard } from "./AdminBalanceCard";
import { SelfFundModal } from "./SelfFundModal";
import { useAdminUsers } from "@/hooks/api/useAdminUsers";
import { useCurrentAdmin } from "@/hooks/api/useCurrentAdmin";

interface FundingUser {
  id: string;
  username: string;
  balance: number;
}

export function AdminUsersPageContent() {
  const { users, loading, error, deleteUser, refetch } = useAdminUsers();
  const { 
    currentAdmin, 
    loading: adminLoading, 
    error: adminError, 
    fundSelf, 
    refetch: refetchAdmin 
  } = useCurrentAdmin();
  
  const [fundingUser, setFundingUser] = useState<FundingUser | null>(null);
  const [selfFundModalOpen, setSelfFundModalOpen] = useState(false);

  const handleDeleteUser = async (userId: string, username: string) => {
    if (window.confirm(`Are you sure you want to delete user "${username}"?`)) {
      try {
        await deleteUser(userId);
      } catch (error) {
        console.error("Failed to delete user:", error);
      }
    }
  };

  const handleFundUser = (user: FundingUser) => {
    setFundingUser(user);
  };

  const handleFundSubmit = async (amount: number, description?: string) => {
    if (!fundingUser) return;

    try {
      const response = await fetch("/api/admin/funds", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          userId: fundingUser.id,
          amount,
          description: description || "Admin funding",
        }),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "Failed to add funds");
      }

      await refetch(); // Refresh the users list
      setFundingUser(null);
    } catch (error) {
      throw error; // Re-throw to be handled by the modal
    }
  };

  const handleSelfFund = async (amount: number, description?: string) => {
    try {
      await fundSelf(amount, description);
      // Refresh both admin info and users list (in case admin appears in users list)
      await Promise.all([refetchAdmin(), refetch()]);
    } catch (error) {
      throw error; // Re-throw to be handled by the modal
    }
  };

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-6">User Management</h1>
      
      {/* Admin Balance Card */}
      {currentAdmin && (
        <AdminBalanceCard
          balance={currentAdmin.balance}
          username={currentAdmin.username}
          loading={adminLoading}
          onTopUp={() => setSelfFundModalOpen(true)}
          onRefresh={refetchAdmin}
        />
      )}

      {adminError && (
        <div className="mb-4 p-3 bg-red-50 border border-red-200 text-red-700 rounded-md">
          Error loading admin info: {adminError}
        </div>
      )}
      
      <CreateUserForm onUserCreated={refetch} />
      
      <UsersTable
        users={users}
        loading={loading}
        error={error}
        onDeleteUser={handleDeleteUser}
        onFundUser={handleFundUser}
      />

      <FundUserModal
        open={!!fundingUser}
        onOpenChange={() => setFundingUser(null)}
        user={fundingUser}
        onConfirm={handleFundSubmit}
      />

      {currentAdmin && (
        <SelfFundModal
          open={selfFundModalOpen}
          onOpenChange={setSelfFundModalOpen}
          onConfirm={handleSelfFund}
          currentBalance={currentAdmin.balance}
          username={currentAdmin.username}
        />
      )}
    </div>
  );
}
